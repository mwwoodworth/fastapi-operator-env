{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BrainOps Operator Environment","text":"<p>This repository contains a lightweight task runner and API server used by the BrainOps automation system. Tasks can be executed via CLI, HTTP API or Make.com webhooks.</p> <p>Continuous integration runs linting, type checks and tests with coverage to ensure code quality.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<ol> <li> <p>Install dependencies and create a local environment file:    <code>bash    pip install -r requirements.txt    cp .env.example .env</code>    Fill in the required API keys inside <code>.env</code>.</p> </li> <li> <p>Enable JWT auth by defining users:    <code>bash    export AUTH_USERS='{\"admin\": \"secret\"}'    export ADMIN_USERS=admin</code>    Obtain tokens via <code>/auth/token</code> and include <code>Authorization: Bearer &lt;token&gt;</code> on requests.</p> </li> <li> <p>Launch the server:    <code>bash    uvicorn main:app --host 0.0.0.0 --port 10000</code></p> </li> </ol>"},{"location":"#usage","title":"Usage","text":""},{"location":"#cli","title":"CLI","text":"<p>Run tasks locally using either key/value flags or the JSON wrapper:</p> <pre><code>python main.py task run '{\"task\": \"create_tana_node\", \"context\": {\"content\": \"CLI test\"}}'\n</code></pre>"},{"location":"#api","title":"API","text":"<p>Start the server:</p> <pre><code>uvicorn main:app --host 0.0.0.0 --port 10000\n</code></pre> <p>Then POST to <code>/task/run</code> with JSON body:</p> <pre><code>{\"task\": \"deploy_vercel\", \"context\": {\"project_path\": \".\"}}\n</code></pre>"},{"location":"#environment","title":"Environment","text":"<p>Copy <code>.env.example</code> to <code>.env</code> and fill in the required keys. Configuration is loaded via <code>core/settings.py</code> using Pydantic's <code>BaseSettings</code>, which reads the <code>.env</code> file automatically. Set <code>ENVIRONMENT=production</code> when deploying so missing required variables raise an error. Supabase credentials are required in production for persistent memory storage. Set <code>SLACK_WEBHOOK_URL</code> to a Slack incoming webhook to get notified when tasks succeed or fail.</p>"},{"location":"#database-migrations","title":"Database migrations","text":"<p>Before running the server in production, apply the Alembic migrations to ensure the database schema and extensions are up to date:</p> <pre><code>alembic upgrade head\n</code></pre> <p><code>DATABASE_URL</code> must point to your Supabase Postgres instance for the migrations to run successfully.</p>"},{"location":"#tasks","title":"Tasks","text":"<p>Tasks live in <code>codex/tasks/</code> and each implements a <code>run(context)</code> function returning structured results.</p>"},{"location":"#demo-data","title":"Demo Data","text":"<p>Sample helpers in the <code>mock/</code> folder can be used to generate example events or tasks during onboarding:</p> <pre><code>python main.py task run '{\"task\": \"claude_prompt\", \"context\": {\"prompt\": \"demo\"}}'\n</code></pre> <p>New automation tasks power BrainStackStudio's publishing workflow:</p> <ul> <li><code>autopublish_content</code> \u2013 publish an article to the site, trigger Make.com marketplace uploads and optionally send a newsletter.</li> <li><code>sync_sale</code> \u2013 notify Make.com of a new sale to start onboarding and CRM sync.</li> <li><code>generate_product_docs</code> \u2013 create product docs with Claude and push them to your documentation site.</li> </ul> <p>See <code>docs/production_checklist.md</code> for a go-live checklist.</p>"},{"location":"#secrets-vault","title":"Secrets Vault","text":"<p>The API exposes endpoints under <code>/secrets</code> for storing and retrieving encrypted credentials. Example:</p> <pre><code>curl -X POST http://localhost:10000/secrets/store -H \"Content-Type: application/json\" -d '{\"name\":\"CLAUDE_API_KEY\",\"value\":\"sk-xyz\"}'\n</code></pre> <p>You can view available tasks by calling the <code>/docs/registry</code> endpoint once the server is running.</p> <p>Additional helpful endpoints:</p> <ul> <li><code>/webhook/make</code> - trigger tasks from Make.com.</li> <li><code>/diagnostics/state</code> - view operator status snapshot.</li> <li><code>/voice/status</code> - latest voice transcript processing info.</li> <li><code>/voice/history</code> - recent transcription records.</li> <li><code>/agent/inbox</code> - pending task queue.</li> <li><code>/agent/inbox/approve</code> - approve or reject tasks.</li> <li><code>/agent/inbox/summary</code> - inbox counts overview.</li> <li><code>/dashboard/full</code> - extended operator metrics.</li> <li><code>/dashboard/metrics</code> - summary counts of tasks and memory logs.</li> <li><code>/metrics</code> - Prometheus metrics for monitoring.</li> <li><code>/dashboard/ui</code> - live dashboard interface.</li> <li><code>/dashboard/copilot-v2</code> - memory-assisted Copilot v2.</li> <li><code>/dashboard/pipeline</code> - Claude category pipelines.</li> <li><code>/dashboard/products</code> - marketplace-ready documents.</li> <li><code>/dashboard/export</code> - export markdown system.</li> <li><code>/memory/search</code> - search memories with filters.</li> <li><code>/knowledge/doc/upload</code> - add a new knowledge document with vector embedding.</li> <li><code>/knowledge/search</code> - semantic search across uploaded documents.</li> <li><code>/logs/errors</code> - recent error entries.</li> <li><code>/mobile/task</code> - quick mobile task capture.</li> <li><code>/agent/forecast/weekly</code> - generate a 7-day forecast plan.</li> <li><code>/dashboard/forecast</code> - view the rolling task timeline.</li> <li><code>/agent/strategy/weekly</code> - run the weekly strategy agent.</li> <li><code>/task/dependency-map</code> - create a dependency map for tasks.</li> <li><code>/feedback/report</code> - submit bug reports or suggestions.</li> <li><code>docs/production_checklist.md</code> - production readiness guide.</li> </ul>"},{"location":"#deployment","title":"Deployment","text":"<p>Use <code>uvicorn main:app</code> locally. For cloud deploy, create a Render or Vercel service using the provided <code>render.yaml</code> and ensure all environment variables from <code>.env</code> are set. The dashboard at <code>/dashboard/ui</code> includes a PWA manifest. Open the page in a modern mobile browser and choose Add to Home Screen to install it like a native app.</p>"},{"location":"#dashboard-ui","title":"Dashboard UI","text":"<p>A production-ready dashboard is located in <code>dashboard_ui/</code> built with Next.js, Tailwind CSS and shadcn/ui components. It can be deployed statically or embedded via <code>&lt;iframe&gt;</code>.</p>"},{"location":"#marketing-site","title":"Marketing Site","text":"<p>The same Next.js project also hosts a lightweight marketing site for BrainStack Studio. Visit <code>/</code>, <code>/products</code>, <code>/services</code>, <code>/about</code>, <code>/contact</code>, <code>/newsletter</code> or <code>/blog</code> for the public pages. The contact form submits to <code>/api/contact</code> and forwards data to the <code>MAKE_WEBHOOK_URL</code> if set. Newsletter signups are sent to <code>/api/newsletter/subscribe</code> using the provider configured in <code>.env</code>.</p>"},{"location":"#build-export","title":"Build &amp; Export","text":"<pre><code>cd dashboard_ui\nnpm install\nnpm run build &amp;&amp; npm run export\n</code></pre> <p>The export step outputs static files to <code>static/dashboard/</code> which FastAPI serves at <code>/dashboard/ui</code>.</p>"},{"location":"#deploy","title":"Deploy","text":"<ul> <li>Vercel/Netlify: deploy <code>dashboard_ui</code> as a static site.</li> <li>FastAPI static: copy the exported files to <code>static/dashboard/</code> on your server.</li> </ul>"},{"location":"#embed","title":"Embed","text":"<p>Include the dashboard in another site using:</p> <pre><code>&lt;iframe src=\"/dashboard/ui\" width=\"100%\" height=\"600\" style=\"border:0;\"&gt;&lt;/iframe&gt;\n</code></pre> <p>The same snippet works in Tana, Google Sites or any platform that allows iframes.</p> <p>-### Customization</p> <ul> <li>API endpoint base URL is configured with <code>NEXT_PUBLIC_API_BASE</code>.</li> <li>JWT tokens are loaded from <code>localStorage.token</code> if present. Optionally set <code>NEXT_PUBLIC_AUTH_HEADER</code> to force a static header value.</li> <li>Optional <code>MAKE_WEBHOOK_URL</code> is used by the contact form to forward submissions.</li> <li>Branding and styling can be tweaked in <code>dashboard_ui/styles</code> and React components.</li> </ul>"},{"location":"#brainops-ai-assistant","title":"BrainOps AI Assistant","text":"<p>The dashboard includes a persistent chat widget that proxies to the FastAPI <code>/chat</code> endpoint via <code>/api/assistant/chat</code>. Use it to summarize memory or trigger tasks. Conversations are saved to Supabase for later review.</p>"},{"location":"#icon-assets","title":"Icon Assets","text":"<p>Icon files such as <code>favicon.svg</code> are not stored in this repository. After merging any changes, upload the required <code>.svg</code> and <code>.ico</code> assets manually on GitHub.</p>"},{"location":"api_reference/","title":"API Reference","text":"<p>The FastAPI server exposes its OpenAPI schema at <code>/openapi.json</code>. When the server is running locally, you can view interactive docs at <code>/docs</code>.</p> <p>To generate a typed TypeScript SDK, first fetch the schema then run <code>openapi-typescript-codegen</code>:</p> <pre><code>curl http://localhost:10000/openapi.json -o openapi.json\nnpm exec openapi-typescript-codegen -- \\\n  --input openapi.json \\\n  --output sdk \\\n  --useOptions \\\n  --exportSchemas\n</code></pre> <p>This creates a <code>sdk/</code> folder with the client library.</p>"},{"location":"backlog/","title":"Feature Backlog","text":""},{"location":"backlog/#advanced-dashboard-widgets","title":"Advanced dashboard widgets","text":"<ul> <li>[x] Add analytics charts for task throughput and error rates.</li> <li>[ ] Implement calendar, timeline, and Kanban views for scheduled tasks.</li> </ul>"},{"location":"backlog/#smart-search-and-filtering","title":"Smart search and filtering","text":"<ul> <li>[x] Allow query of Tana data with tags, time ranges, and free text.</li> <li>[x] Integrate fuzzy search for memory entries.</li> </ul>"},{"location":"backlog/#multi-user-support","title":"Multi-user support","text":"<ul> <li>[x] Add optional user field on tasks and memories.</li> <li>[x] Implement simple role-based access for admin vs. viewer.</li> </ul>"},{"location":"backlog/#additional-integrations","title":"Additional integrations","text":"<ul> <li>Notion import/export of tasks.</li> <li>[x] Slack notifications for completed tasks and errors.</li> </ul>"},{"location":"backlog/#mobile-pwa-polish","title":"Mobile PWA polish","text":"<ul> <li>[x] Add manifest for installability.</li> <li>Cache recent dashboard data for offline access.</li> <li>[ ] Feedback form in dashboard for user bug reports.</li> </ul>"},{"location":"master_guide/","title":"Master Guide","text":"<p>Executive Summary The backend already delivers a solid task\u2011runner architecture, memory store, chat assistant, basic RAG, voice \u2192 task automation, Make.com &amp; GitHub webhooks, and a minimal PWA dashboard. To reach production\u2011grade parity with BrainOps\u2019 AI\u2011native vision we must:</p> <p>add streaming AI responses &amp; richer inference orchestration;</p> <p>finish RAG (vector search, Notion/Tana/ClickUp ingestion, auto\u2011RAG in chat);</p> <p>implement missing vertical integrations (ClickUp, Stripe, Slack inbound, roofing agents);</p> <p>harden auth/security, deployable background workers, testing, CI/CD, observability;</p> <p>generate a typed TS SDK &amp; full docs;</p> <p>supply a structured sprint plan so Codex can iterate safely with human\u2011approved guardrails.</p> <p>1\u00a0\u00a0Current State Recap Area    Implemented\u00a0Highlights  Status Task engine Dynamic registry, retry queue, Supabase persistence \u2705 Mature Chat/Copilot    /chat, task suggestions, memory context \u26a0\ufe0f Blocking: no SSE\u00a0streaming Memory &amp; RAG    JSON/Supabase memory, basic doc index, unified RAG agent    \u26a0\ufe0f Basic substring search only Voice   Whisper transcription \u2192 chat\u2011to\u2011task \u2192 inbox    \u2705 Prototype Integrations    Make.com webhook, GitHub webhook, Slack outbound    \u26a0\ufe0f Many inbound APIs missing Dashboard\u00a0UI    Static Next.js export served by FastAPI \u26a0\ufe0f Needs streaming support &amp; richer metrics Auth/Security   Global HTTP Basic, admin check  \u26a0\ufe0f No JWT, no role/tenant separation Deployment  Render YAML, Supabase, migrations checklist \u26a0\ufe0f No background worker, limited file persistence Tests/CI    Initial pytest folder, no coverage gates    \u26a0\ufe0f Sparse</p>"},{"location":"master_guide/#2-gap-analysis-completion-requirements","title":"2\u00a0\u00a0Gap Analysis &amp; Completion Requirements","text":"<p>2.1\u00a0AI Inference Pipeline Implement token\u2011streaming for Claude &amp; GPT models via StreamingResponse or SSE.\u00a0 Medium GitHub</p> <p>Add async generator helpers; ensure frontend consumes EventSource / fetch stream.\u00a0 Medium</p> <p>Introduce retry / fallback model logic for transient API errors.</p> <p>Support interrupt / cancel (client abort closes generator).</p> <p>Build progress events for multi\u2011step tasks (e.g., voice pipeline).</p>"},{"location":"master_guide/#22-retrievalaugmented-generation","title":"2.2\u00a0Retrieval\u2011Augmented Generation","text":"<p>Replace JSON doc index with pgvector\u2011backed semantic search in Supabase.\u00a0 Supabase Swizec</p> <p>Create /rag/documents CRUD endpoints that embed &amp; persist docs.</p> <p>Finish Notion adapter: implement search &amp; page snippet retrieval with official API.\u00a0 Notion Developers pynotion.com</p> <p>Build ClickUp search adapter for docs/tasks.\u00a0 ClickUp Developer Docs ClickUp Developer Docs</p> <p>Integrate auto\u2011RAG path in /chat: detect knowledge questions, run RAG, inject answer + citations.</p>"},{"location":"master_guide/#23-verticalspecific-integrations","title":"2.3\u00a0Vertical\u2011Specific Integrations","text":"<p>Vertical    Required Features Project/PM  Two\u2011way ClickUp sync (create/update tasks, pull statuses). Passive\u00a0Income  Stripe webhook endpoint (signature\u2011verified) for sale events \u2192 sync_sale.\u00a0 Stripe Docs Stripe Docs Automation  Slack Slash\u2011command &amp; Events API receiver so operators can query/approve via Slack.\u00a0 Slack API Stack Overflow Roofing Initial \u201cRoof\u202fAI\u201d task: parse EagleView JSON \u2192 quantity take\u2011off, plus cost\u2011template generator.</p>"},{"location":"master_guide/#24-auth-security","title":"2.4\u00a0Auth &amp; Security","text":"<p>Replace basic auth with JWT Bearer (FastAPI tutorial pattern).\u00a0 FastAPI TestDriven.io</p> <p>Support session\u2011scoped chat (session_id) &amp; role\u2011based admin check.</p> <p>CSRF &amp; webhook secrets already partially implemented\u2014extend to all inbound webhooks.</p>"},{"location":"master_guide/#25-background-scheduling","title":"2.5\u00a0Background &amp; Scheduling","text":"<p>Add Celery/Redis worker (or Baseten/Reflex) for long\u2011running tasks; expose /tasks/status/{id}.\u00a0 TestDriven.io TestDriven.io</p> <p>Migrate existing retry queue to Celery beat schedule where appropriate.</p> <p>Containerize worker in docker-compose.dev.yml &amp; Render background service.</p>"},{"location":"master_guide/#26-observability-ops","title":"2.6\u00a0Observability &amp; Ops","text":"<p>Structured JSON logging; export to Render logs &amp; Supabase table.</p> <p>/metrics Prometheus endpoint; optional Grafana dashboard.</p> <p>Slack alert improvements: route errors &amp; criticals; weekly digest task.</p>"},{"location":"master_guide/#27-testing-cicd","title":"2.7\u00a0Testing &amp; CI/CD","text":"<p>Expand pytest to cover \u2265\u202f90\u202f% endpoints; include streaming tests (async TestClient).</p> <p>Add integration tests for each external API via VCR\u2011py or mocks.</p> <p>Add GitHub Actions: lint (black, ruff), type\u2011check (mypy), test, build Docker; block merges on failure.</p>"},{"location":"master_guide/#28-docs-sdk","title":"2.8\u00a0Docs &amp; SDK","text":"<p>Annotate every endpoint with Pydantic in/out models for full OpenAPI.</p> <p>Generate TypeScript client via openapi-typescript-codegen.\u00a0 npm</p> <p>Publish README \u2192 docs site (MkDocs Material) with how\u2011tos.</p>"},{"location":"master_guide/#3-stepbystep-completion-roadmap","title":"3\u00a0\u00a0Step\u2011by\u2011Step Completion Road\u2011Map","text":"<p>Each numbered step belongs to a sprint (see \u00a74). Check \u2611 as you merge PRs; keep changelog in /misc/CHANGELOG_Agent.md.</p>"},{"location":"master_guide/#step-0-foundational-cleanup","title":"Step\u00a00\u00a0\u2014\u00a0Foundational Cleanup","text":"<p>Run Alembic migrations on Supabase; ensure pgvector enabled.\u00a0 Supabase</p> <p>Refactor settings loader; centralise env validation.</p> <p>Convert remaining ad\u2011hoc dict responses to Pydantic models.</p>"},{"location":"master_guide/#step-1-streaming-chat","title":"Step\u00a01\u00a0\u2014\u00a0Streaming Chat","text":"<p>Refactor /chat to /chat/stream using SSE (text/event-stream).\u00a0 GitHub</p> <p>Update Claude &amp; GPT wrappers to yield tokens.</p> <p>Patch dashboard React hook to consume EventSource stream.</p>"},{"location":"master_guide/#step-2-vector-rag-core","title":"Step\u00a02\u00a0\u2014\u00a0Vector RAG Core","text":"<p>Create documents table (id, content, metadata, embedding vector).</p> <p>Write embed_and_store() helper; use OpenAI\u00a0ADA\u2011002.</p> <p>Add /knowledge/doc/upload &amp; /knowledge/search vector routes.</p>"},{"location":"master_guide/#step-3-external-integrations","title":"Step\u00a03\u00a0\u2014\u00a0External\u00a0Integrations","text":"<p>Notion: adapter functions search_notion_pages, get_page_snippet.\u00a0 Notion Developers</p> <p>ClickUp: create_task, search_tasks; secret via vault.\u00a0 ClickUp Developer Docs</p> <p>Slack Inbound: /webhook/slack/command, verify signing secret.\u00a0 Slack API</p> <p>Stripe: /webhook/stripe, verify signature, enqueue sync_sale.\u00a0 Stripe Docs</p>"},{"location":"master_guide/#step-4-auth-security","title":"Step\u00a04\u00a0\u2014\u00a0Auth &amp; Security","text":"<p>Implement OAuth2\u2011Password + JWT per FastAPI docs.\u00a0 FastAPI</p> <p>Protect secrets endpoints with role admin.</p> <p>Migrate dashboard login to JWT flow.</p>"},{"location":"master_guide/#step-5-background-processing","title":"Step\u00a05\u00a0\u2014\u00a0Background Processing","text":"<p>Add Celery worker (Redis broker) with example long_task.\u00a0 TestDriven.io</p> <p>Convert existing recurring scheduler to Celery beat.</p> <p>Deploy worker on Render background service.</p>"},{"location":"master_guide/#step-6-observability-ci","title":"Step\u00a06\u00a0\u2014\u00a0Observability &amp; CI","text":"<p>Add structured logging (loguru).</p> <p>/metrics endpoint with Prometheus client.</p> <p>GitHub Actions pipeline (lint, type, test, build).</p>"},{"location":"master_guide/#step-7-docs-sdk","title":"Step\u00a07\u00a0\u2014\u00a0Docs &amp; SDK","text":"<p>Finish Pydantic schemas; generate client/brainops-sdk via openapi-typescript-codegen.\u00a0 npm</p> <p>Publish MkDocs site to GitHub Pages; link in README.</p>"},{"location":"master_guide/#step-8-roofing-vertical-mvp","title":"Step\u00a08\u00a0\u2014\u00a0Roofing Vertical MVP","text":"<p>Write parse_eagleview_report task \u2192 CSV quantities.</p> <p>Write generate_roof_estimate that feeds template &amp; pricing sheet.</p> <p>Add tests and sample fixtures.</p>"},{"location":"master_guide/#4-codex-sprint-matrix","title":"4\u00a0\u00a0Codex Sprint Matrix","text":"<p>Create one file per sprint under /sprints/, named sprint\u2011N\u2011.md. Each file should: <p>Copy its tasks from the table below (checklist markdown).</p> <p>Link back to /misc/brainops\u2011backend\u2011master\u2011guide.md.</p> <p>End with \u201c###\u00a0Definition\u00a0of\u00a0Done\u201d (acceptance criteria).</p> <p>Sprint  Focus   File    Tasks 0   Foundations &amp; schemas   sprint\u20110\u2011foundation.md  Step\u202f0 1   Streaming chat  sprint\u20111\u2011streaming-chat.md  Step\u202f1 2   Vector RAG  sprint\u20112\u2011vector-rag.md  Step\u202f2 3   Integrations I  sprint\u20113\u2011integrations.md    Step\u202f3 4   Auth &amp; Security sprint\u20114\u2011auth-security.md   Step\u202f4 5   Background / Worker sprint\u20115\u2011background.md  Step\u202f5 6   Observability &amp; CI  sprint\u20116\u2011observability.md   Step\u202f6 7   Docs &amp; SDK  sprint\u20117\u2011docs-sdk.md    Step\u202f7 8   Roofing MVP sprint\u20118\u2011roofing-mvp.md Step\u202f8</p>"},{"location":"master_guide/#5-development-guardrails-for-codex","title":"5\u00a0\u00a0Development Guard\u2011Rails for Codex","text":"<p>Prompt Codex with tight specs \u2013 excerpt the relevant step task verbatim.</p> <p>One PR per task; enforce passing CI suite.</p> <p>Run make lint test locally before committing.</p> <p>Never store secrets in code \u2013 use /secrets/store.</p> <p>Comment every network call with endpoint &amp; expected status codes.</p> <p>Write/expand tests alongside implementation; \u2265\u202f90\u202f% coverage gate.</p> <p>Respect style (black, ruff, types).</p> <p>After merge, codex must update the sprint file checkboxes and push.</p>"},{"location":"master_guide/#6-resource-pointers-references","title":"6\u00a0\u00a0Resource Pointers &amp; References","text":"<p>FastAPI SSE streaming examples\u00a0 Medium GitHub</p> <p>Notion search API\u00a0 Notion Developers  &amp; Python tutorial\u00a0 pynotion.com</p> <p>ClickUp task endpoints\u00a0 ClickUp Developer Docs ClickUp Developer Docs</p> <p>FastAPI JWT/OAuth2 patterns\u00a0 FastAPI TestDriven.io</p> <p>Supabase\u202fpgvector docs\u00a0 Supabase  &amp; similarity tutorial\u00a0 Swizec</p> <p>Stripe webhook signature verification\u00a0 Stripe Docs Stripe Docs</p> <p>Slack slash command/events guide\u00a0 Slack API Stack Overflow</p> <p>OpenAPI \u2192 TypeScript codegen\u00a0 npm</p> <p>Celery + FastAPI background task patterns\u00a0 TestDriven.io TestDriven.io</p> <p>Use these sources when Codex requests examples or clarification.</p>"},{"location":"production_checklist/","title":"Production Go-Live Checklist","text":"<p>Use this list before launching BrainStackStudio in production.</p> <ul> <li>[ ] Set <code>ENVIRONMENT=production</code> and verify all required secrets are present</li> <li>[ ] Configure <code>BRAINSTACK_API_URL</code> and <code>BRAINSTACK_API_KEY</code></li> <li>[ ] Configure Make.com webhooks (<code>MAKE_PUBLISH_WEBHOOK</code> and <code>MAKE_SALE_WEBHOOK</code>)</li> <li>[ ] Configure <code>NEWSLETTER_API_URL</code> and <code>NEWSLETTER_API_KEY</code></li> <li>[ ] Point domain DNS records to hosting provider</li> <li>[ ] Enable Stripe or marketplace links in site settings</li> <li>[ ] Run database migrations</li> <li>[ ] Verify dashboard metrics and sales data update in real time</li> <li>[ ] Test a sample purchase flow end-to-end</li> <li>[ ] Trigger <code>generate_product_docs</code> for each product and review output</li> </ul>"},{"location":"roofing_tasks/","title":"Roofing Tasks","text":"<p>This project includes simple helpers for the roofing vertical.</p>"},{"location":"roofing_tasks/#parse_eagleview_report","title":"parse_eagleview_report","text":"<p>Provide an EagleView JSON payload and receive a CSV quantity take\u2011off. Example:</p> <pre><code>from codex import run_task\nreport = {\"measurements\": {\"roofAreas\": {\"totalArea\": 2500, \"totalSquares\": 25}}}\nresult = run_task(\"parse_eagleview_report\", {\"report\": report})\nprint(result[\"csv\"])\n</code></pre>"},{"location":"roofing_tasks/#generate_roof_estimate","title":"generate_roof_estimate","text":"<p>Given roof quantities and an optional pricing sheet, compute material and labor totals.</p> <pre><code>quantities = result[\"quantities\"]\nestimate = run_task(\"generate_roof_estimate\", {\"quantities\": quantities})\nprint(estimate[\"total\"])\n</code></pre> <p>See <code>tests/test_roofing_tasks.py</code> for sample fixtures.</p>"},{"location":"threat_model/","title":"Threat Model","text":"<p>The API exposes authenticated task execution and data management endpoints. Threats include brute force login, session hijacking and CSRF abuse. Rate limiting with SlowAPI caps requests per IP at 100 per minute to deter brute force attempts. OAuth2 access tokens expire after 15 minutes and refresh tokens rotate via <code>/auth/refresh</code>, both stored in <code>HttpOnly</code> cookies. CSRF protection uses a double\u2011submit token from <code>fastapi-csrf-protect</code> which is set at login and must be sent in the <code>X-CSRF-Token</code> header for state-changing requests. These controls minimize the impact of stolen cookies and cross-site attacks while retaining stateless JWT auth.</p>"}]}